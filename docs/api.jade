doctype html
html(lang='en')
  head
    meta(charset="utf-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no")
    title Mongoose API v#{package.version}
    link(href='http://fonts.googleapis.com/css?family=Anonymous+Pro:400,700|Droid+Sans+Mono|Open+Sans:400,700|Linden+Hill|Quattrocento:400,700|News+Cycle:400,700|Antic+Slab|Cabin+Condensed:400,700', rel='stylesheet', type='text/css')
    link(href='/docs/css/default.css', rel='stylesheet', type='text/css')
    style.
      body {
        background: #d8e2d8 url(/docs/images/square_bg.png) fixed;
        font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;
        color: #333;
        -webkit-font-smoothing: antialiased;
        -webkit-text-size-adjust: 100%;
        padding: 0;
        margin: 0;
        font-size: 14px;
        line-height: 22px;
      }
      a {
        color: #800;
        -webkit-transition-property: opacity, -webkit-transform, color, background-color, padding, -webkit-box-shadow;
        -webkit-transition-duration: 0.15s;
        -webkit-transition-timing-function: ease-out;
      }
      a:hover {
        opacity: 0.8;
      }
      #wrap {
      }
      h1 {
        font-family: 'Helvetica Nueue', Helvetica, Arial, FreeSans, sans-serif;
        text-rendering: geometricPrecision;
      }
      pre {
        background: rgba(255,255,255,.8);
        border: 1px solid #bbb;
        padding:5px;
        border-radius: 3px;
        box-shadow: 1px 3px 6px #ddd;
      }
      code {
        background: rgba(255,255,255,.8);
        color: #333;
        border-radius: 3px;
        font-size: 13px;
        font-family: Monaco;
        /*text-shadow: 1px 2px 2px #555;*/
      }
      pre code {
        border: 0 none;
        padding: 1.2em;
        overflow-x: auto;
      }
      h3 code {
        font-weight: normal;
      }
      hr {
        display: none;
        height: 1px;
        border: 0 none;
        padding: 0;
        margin: 90px 0;
        background: -webkit-gradient(linear, left top, right top, from(rgba(57, 172, 57, 0.0)), color-stop(0.5, rgba(57, 172, 57, 0.33)), to(rgba(57, 172, 57, 0.0)))
      }
      .doclinks hr {
        margin: 10px 0;
      }
      li {
        list-style: square;
      }
      #header {
        padding-top: 12px;
        padding-bottom: 25px;
      }
      #header h1 {
        margin-top: 0;
        margin-bottom: 0;
      }
      #header h1 a {
        text-decoration: none;
      }
      #header .mongoose {
        font-size: 50px;
        font-weight: 100;
        color: #fff;
        text-shadow: 4px 4px 5px #777, -3px 0px 2px white;
        letter-spacing: -7px;
      }
      #links {
        position: fixed;
        top: 0;
        left: 0;
        bottom: 0;
        width: 210px;
        overflow-x: hidden;
        overflow-y: auto;
        -webkit-overflow-scrolling: touch;
        padding: 15px 0 30px 20px;
        border-right: 1px solid #ddd;
        background: -webkit-gradient(linear, left top, right top, from(transparent), color-stop(0.92, transparent), color-stop(0.9201, rgba(172,172,172, 0.0)), to(rgba(172,172,172, 0.4))), transparent;
      }
      #docs {
        padding: 0;
        margin: 0 0 30px 230px;
        overflow-x: hidden;
      }
      #docs p {
        word-wrap: break-word;
      }
      #docs > ul {
        margin: 0;
        padding: 0;
      }
      .private {
        display: none;
      }
      .module {
        list-style: none;
        padding: 30px 0 30px 30px;
        border-color: #eee;
        border-width: 9px 10px;
        border-style: solid;
        background-color: #fff;
      }
      .module > * {
        max-width: 700px;
      }
      .method, .property {
        margin-bottom: 175px;
      }
      .property h3 span {
        color: #444;
      }
      .sourcecode {
        display: none;
      }
      .showcode {
        font-size: 12px;
        cursor: pointer;
        display: none;
      }
      .load .showcode {
        display: block;
      }
      .types a {
        text-decoration: none;
      }
      @media only screen and (device-width: 768px) {

      }
      @media only screen and (max-width: 480px) {
        #links { display: none; }
        #docs { margin-left: 0; }
        .module {
          padding-left: 5px;
          border-width: 3px;
        }
      }
  body.api
    a(href="http://github.com/learnboost/mongoose")
      img(style="position: absolute; top: 0; right: 0; border: 0;", src="https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png", alt="Fork me on GitHub")
    #links
      #header
        h1
          a(href="https://github.com/learnboost/mongoose", target="blank")
            .mongoose Mongoose
      .doclinks
        ul
          li plugins
          li support
          li home
          li fork
          li guide
          li change log
          li contributors
        hr
        each item in docs
          a.section(href='#' + item.title)= item.title
          ul
            each method in item.methods
              if method.ctx && !method.ignore
                li(class= method.isPrivate ? 'private' : '')
                  a(href='#' + method.ctx.constructor + '-' + method.ctx.name)= method.ctx.name
            each property in item.props
              if property.ctx && !property.ignore
                li
                  a(href='#' + property.ctx.constructor + '-' + property.ctx.name)= property.ctx.name
    #docs
      ul
        each item in docs
          li.module
            a(href=github + package.version + '/' + item.title)= item.title
            each method in item.methods
              if !method.ignore
                div.method(class= method.isPrivate ? 'private' : '')
                  if method.ctx
                    case method.ctx.type
                      when 'method'
                        id = method.ctx.constructor + '-' + method.ctx.name
                        text = method.ctx.constructor + '#' + method.ctx.name
                      when 'function'
                        id = method.ctx.name
                        text = method.ctx.name
                    h3(id= id)
                      = text
                      | (
                      each tag, i in method.params
                        code= tag.name
                        if i+1 < method.params.length
                          | , 
                      | )
                  else
                    h3 MISSING method name
                  != method.description.summary
                  if method.code
                    span.showcode show code
                    .sourcecode
                      != hl(method.code)
                  if method.params.length
                    .params
                      h4 Parameters:
                      ul
                        each tag in method.params
                          li
                            - if (!tag.name)
                              - console.log(tag)
                            code= tag.name
                            if tag.types && tag.types.length
                              span.types
                                |  &lt;
                                each type, i in tag.types
                                  != linktype(type)
                                  if i+1 < tag.types.length
                                    | , 
                                | &gt; 
                            span= tag.description
                  if method.return
                    .returns
                      h4 Returns:
                      ul
                        li
                          span.types
                            |  &lt;
                            each type in method.return.types
                              != linktype(type)
                            | &gt; 
                          span= method.return.description
                  if method.inherits
                    .inherits
                      h4 Inherits:
                      ul
                        li
                          != method.inherits
                  if method.see.length
                    .see
                      h4 See:
                      ul.see
                        each see in method.see
                          li
                            href = see.url || '#' + see.local.replace('#', '-')
                            a(href=href, title=see.title || see.local)= see.title || see.url || see.local
                  != method.description.body
                hr(class= method.isPrivate ? 'private' : '')
            each property in item.props
              div.property(class= property.ignore || property.isPrivate ? 'private' : '')
                construct = property.ctx.constructor
                h3(id = construct + '-' + property.ctx.name)
                  = construct + '#'
                  span= property.ctx.name
                != property.description.full
                if property.return
                  .returns
                    h4 Returns:
                    ul
                      li
                        span.types
                          |  &lt;
                          each type in property.return.types
                            != linktype(type)
                          | &gt; 
                        span= property.return.description
              hr
    script.
      document.body.className = 'load';
    include includes/googleanalytics
    script(src="/docs/js/zepto.min.js")
    script.
      $(".module").on("click", ".showcode", function (e) {
        $(this).closest(".method").find(".sourcecode").first().toggle();
      });
